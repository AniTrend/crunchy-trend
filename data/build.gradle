/*
 *    Copyright 2019 AniTrend
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

plugins {
    id("com.android.library")
    id("kotlin-android")
    id("kotlin-kapt")
    id("kotlin-android-extensions")
}

android {
    compileSdkVersion compileSdk
    defaultConfig {
        minSdkVersion minSdk
        targetSdkVersion targetSdk
        versionCode rootProject.versionCode
        versionName rootProject.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        buildTypes.each {
            def secretsProps = new Properties()
            file(".config/secrets.properties").withInputStream {
                stream -> secretsProps.load(stream)
            }
            it.buildConfigField("String", "clientToken", secretsProps['clientToken'])
            it.buildConfigField("String", "apiAuthUrl", secretsProps['apiAuthUrl'])
            it.buildConfigField("String", "apiUrl", secretsProps['apiUrl'])

            def configProps = new Properties()
            file(".config/configuration.properties").withInputStream {
                stream -> configProps.load(stream)
            }
            it.buildConfigField("String", "apiFeed", configProps['apiFeed'])
            it.buildConfigField("String", "crunchyUrl", configProps['crunchyUrl'])
            it.buildConfigField("String", "apiVersion", configProps['apiVersion'])
            it.buildConfigField("String", "apiExtension", configProps['apiExtension'])

            it.buildConfigField("int", "DATABASE_SCHEMA_VERSION", DATABASE_SCHEMA_VERSION)
        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

androidExtensions {
    experimental = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    /** Platform Dependencies */
    implementation project(":support-data")
    implementation project(":support-ext")

    /** Koin AndroidX Dependency Injection */
    implementation "org.koin:koin-core:$koin"
    implementation "org.koin:koin-core-ext:$koin"
    implementation "org.koin:koin-androidx-scope:$koin"

    /** Kotlin Libraries */
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesCore"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesAndroid"

    /** Material Design */
    implementation "com.google.android.material:material:$material"

    implementation "androidx.constraintlayout:constraintlayout:$constraint"

    /** Architecture Components */
    implementation "androidx.core:core-ktx:$ktx"
    implementation "androidx.work:work-runtime-ktx:$workerKtx"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleX"
    implementation "androidx.paging:paging-runtime-ktx:$pagingKtx"
    implementation "androidx.paging:paging-runtime:$paging"
    implementation "androidx.room:room-runtime:$room"
    implementation "androidx.room:room-ktx:$room"
    kapt "androidx.room:room-compiler:$room"

    /** Retrofit Libraries */
    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    implementation("com.squareup.retrofit2:converter-simplexml:$retrofit") {
        exclude group: 'xpp3', module: 'xpp3'
        exclude group: 'stax', module: 'stax-api'
        exclude group: 'stax', module: 'stax'
    }

    /** Timber */
    implementation "com.jakewharton.timber:timber:$timber"

    /** Retrofit Libraries */
    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit"
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttpLogger"

    /** Testing-only dependencies */
    testImplementation "junit:junit:$junit"
    testImplementation "io.mockk:mockk:$mockk"
    androidTestImplementation "androidx.test:runner:$runner"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso"
}